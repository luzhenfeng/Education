package com.lzf.greendao.service.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lzf.greendao.entity.UserModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MODEL".
*/
public class UserModelDao extends AbstractDao<UserModel, Long> {

    public static final String TABLENAME = "USER_MODEL";

    /**
     * Properties of entity UserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userid = new Property(1, String.class, "userid", false, "USERID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Realname = new Property(3, String.class, "realname", false, "REALNAME");
        public final static Property Usertype = new Property(4, int.class, "usertype", false, "USERTYPE");
        public final static Property Avatar = new Property(5, String.class, "avatar", false, "AVATAR");
        public final static Property Subjectid = new Property(6, int.class, "subjectid", false, "SUBJECTID");
        public final static Property Access_token = new Property(7, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Expires_in = new Property(8, int.class, "expires_in", false, "EXPIRES_IN");
    }


    public UserModelDao(DaoConfig config) {
        super(config);
    }
    
    public UserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERID\" TEXT," + // 1: userid
                "\"USERNAME\" TEXT," + // 2: username
                "\"REALNAME\" TEXT," + // 3: realname
                "\"USERTYPE\" INTEGER NOT NULL ," + // 4: usertype
                "\"AVATAR\" TEXT," + // 5: avatar
                "\"SUBJECTID\" INTEGER NOT NULL ," + // 6: subjectid
                "\"ACCESS_TOKEN\" TEXT," + // 7: access_token
                "\"EXPIRES_IN\" INTEGER NOT NULL );"); // 8: expires_in
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(4, realname);
        }
        stmt.bindLong(5, entity.getUsertype());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
        stmt.bindLong(7, entity.getSubjectid());
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(8, access_token);
        }
        stmt.bindLong(9, entity.getExpires_in());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(2, userid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(4, realname);
        }
        stmt.bindLong(5, entity.getUsertype());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(6, avatar);
        }
        stmt.bindLong(7, entity.getSubjectid());
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(8, access_token);
        }
        stmt.bindLong(9, entity.getExpires_in());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserModel readEntity(Cursor cursor, int offset) {
        UserModel entity = new UserModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realname
            cursor.getInt(offset + 4), // usertype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // avatar
            cursor.getInt(offset + 6), // subjectid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // access_token
            cursor.getInt(offset + 8) // expires_in
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUsertype(cursor.getInt(offset + 4));
        entity.setAvatar(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSubjectid(cursor.getInt(offset + 6));
        entity.setAccess_token(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExpires_in(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
